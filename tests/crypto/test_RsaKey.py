#  Copyright 2024 Marc Mosko
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


import array
import unittest

from ccnpy.crypto.RsaKey import RsaKey
from tests.MockKeys import private_key_pem, public_key_pem


class RsaKeyTest(unittest.TestCase):

    # openssl sha256 -sign test_key.pem -binary foo | xxd --include
    # Note that this uses PKCS1 v1.5 padding, not PSS
    sign_buffer = [0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x6e,
                   0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61,
                   0x67, 0x6f, 0x0a]

    sign_output = [
        0x9c, 0xdc, 0xe2, 0x33, 0xde, 0x33, 0xaf, 0x47, 0xd4, 0x1b, 0x75, 0xaf,
        0xce, 0x7a, 0x38, 0x3b, 0x52, 0xe4, 0xc2, 0x34, 0xa8, 0x62, 0xc6, 0x27,
        0x1d, 0xcc, 0xd4, 0x91, 0x1f, 0xa4, 0xf5, 0x18, 0x6b, 0x08, 0x3c, 0xde,
        0x0b, 0x75, 0x20, 0x27, 0x4c, 0x5a, 0x81, 0x84, 0x51, 0xe5, 0xe1, 0x70,
        0x6c, 0xd7, 0x75, 0x5b, 0x43, 0x86, 0x6e, 0x4e, 0x0f, 0x49, 0xb0, 0x01,
        0x1d, 0xb3, 0xd5, 0xfc, 0x07, 0x93, 0x90, 0x53, 0x84, 0x2a, 0x1a, 0x66,
        0xe5, 0x43, 0x1f, 0xc4, 0x5e, 0xc3, 0x1b, 0xf9, 0x0c, 0xcd, 0x6e, 0x3e,
        0xd4, 0x8f, 0xc3, 0xd4, 0xb4, 0x55, 0x2e, 0xe2, 0x53, 0xe9, 0x37, 0x15,
        0xd0, 0xf2, 0x20, 0x2b, 0x10, 0xe5, 0x76, 0x71, 0xf9, 0xe9, 0xd3, 0x04,
        0x64, 0xed, 0x97, 0xe0, 0xfe, 0xe9, 0x6c, 0x93, 0xdb, 0x23, 0x67, 0x63,
        0xdb, 0x7e, 0xc4, 0xc0, 0x7d, 0x96, 0xe6, 0x9e, 0xc5, 0x1a, 0xbf, 0xbe,
        0x20, 0x4f, 0x8a, 0xb3, 0x85, 0x09, 0x23, 0x11, 0x50, 0xb5, 0x3f, 0x7c,
        0x69, 0x6c, 0x52, 0xe8, 0x94, 0xf4, 0x71, 0x2a, 0xa0, 0x9e, 0xfb, 0x8f,
        0x8e, 0x1f, 0x97, 0x4f, 0xa9, 0x28, 0xc3, 0x38, 0x42, 0xac, 0x3f, 0x69,
        0x35, 0x9b, 0x56, 0xf7, 0xf0, 0x13, 0x6c, 0xf9, 0xbc, 0x75, 0xf3, 0x9e,
        0xef, 0xab, 0x9f, 0xfe, 0x47, 0xf3, 0x95, 0x35, 0x70, 0x6f, 0xa2, 0xae,
        0x36, 0x13, 0x51, 0x27, 0xc0, 0x85, 0x23, 0x7f, 0x64, 0xff, 0xbc, 0x08,
        0x85, 0x50, 0x17, 0x63, 0xfe, 0x8f, 0x5d, 0x3a, 0x69, 0x99, 0xb7, 0xd1,
        0x47, 0x81, 0x3e, 0xca, 0x52, 0x06, 0xdc, 0x9c, 0x9f, 0xf5, 0xd3, 0x2c,
        0x4b, 0x09, 0x41, 0xbd, 0x3b, 0xb1, 0x91, 0x65, 0x7c, 0x5d, 0x6e, 0xc9,
        0xda, 0x00, 0x25, 0xa3, 0xea, 0x1a, 0x3c, 0xa1, 0x80, 0x5b, 0xa4, 0x9b,
        0x3f, 0x9c, 0xed, 0xd9]

    def test_genkey(self):
        key = RsaKey.generate_private_key(key_length=1024)
        self.assertIsNotNone(key)
        self.assertTrue(key.has_private_key())

    def test_sign(self):
        key = RsaKey(private_key_pem)

        buffer = array.array("B", b'apple')
        signature = key.sign(buffer)

        result = key.verify(buffer, signature=signature)
        self.assertTrue(result)

    def test_verify(self):
        key = RsaKey(public_key_pem)
        buffer = array.array("B", self.sign_buffer)
        signature = array.array("B", self.sign_output)

        result = key.verify(buffer, signature=signature)
        self.assertTrue(result)

    def test_sign_two_buffers(self):
        key = RsaKey(private_key_pem)

        b1 = array.array("B", b'app')
        b2 = array.array("B", b'le')
        signature = key.sign(b1, b2)

        result = key.verify(b1, b2, signature=signature)
        self.assertTrue(result)

    def test_encrypt_decrypt(self):
        key = RsaKey(private_key_pem)
        # 36 bytes is the typical AES 256 bit key plus a 4 byte salt
        plaintext = array.array("B", [x for x in range(0,36)])
        cyphertext = key.encrypt_oaep_sha256(plaintext)
        actual = key.decrypt_oaep_sha256(cyphertext)
        self.assertEqual(plaintext, actual)
